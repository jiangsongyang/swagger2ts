import axios from 'axios';


/**  ============================= API ======================================  */

<% APIsResult.forEach(function(API){ %>
<% if(API.apiDescription) {%>
/** <%- API.apiDescription %> */
<% } %>
export function <%- API.apiName %>(<%- API.parameters %>options?: any
  ): Promise<<%- API.responseType %>> {

    const config = {
      method: '<%- API.method %>',
      baseURL: 'localhost:8080',
      url: `<%- API.apiUrl %>`,
      <% if(['PUT', 'POST', 'DELETE' , 'PATCH'].includes(API.method.toUpperCase())){ %>
        data: {
        <% API.requestData.forEach(function(key){ %>
          <%- key %> ,
        <% }) %>
        },
      <% } %>
      headers: {'X-Requested-With': 'XMLHttpRequest'},
      timeout: 1000,
      responseType: 'json',
      responseEncoding: 'utf8',
      ...options
    }

    return axios(config).then(response => {
      if (response.status >= 200 && response.status < 300) {
        return response.data;
      }
  });
}
<% }); %>

/**  ============================= TYPE ======================================  */
<% typesResult.forEach(function(type){ %>
export interface <%- type.interfaceName %> {
 
  <% type.interfaceValue.forEach(function(interfaceItem){ %>
   <% if(interfaceItem.description) {%>
    /**  <%- interfaceItem.description %> */
    <% } %>
    <%- interfaceItem.key %> : <%- interfaceItem.value %>;
  <% }); %>
}
<% }); %>

<% enumsResult.forEach(function(enumItem){ %>
export enum <%- enumItem.enumName %> {
  <% enumItem.enumValue.forEach(function(value){ %>
    <%- value %>,
  <% }); %>
}
<% }); %>


