{"version":3,"file":"swagger2ts.esm.js","sources":["../src/core/API.ts","../src/core/paths.ts","../src/core/definitions.ts","../src/core/parse.ts","../src/helper/logger.ts","../src/core/config.ts","../src/core/gen.ts","../src/index.ts"],"sourcesContent":["import type { SwaggerPathItemValue } from '../type/SwaggerJson'\n\ntype CreateAPIOptions = {\n  method: string\n  pathConfig: SwaggerPathItemValue\n}\n\nexport class API {\n  method: string\n  pathConfig: SwaggerPathItemValue\n  apiDescription: string\n  apiName: string\n\n  constructor({ method, pathConfig }: CreateAPIOptions) {\n    this.method = method\n    this.pathConfig = pathConfig\n    this.apiDescription = pathConfig.summary\n    this.apiName = pathConfig.operationId\n  }\n}\n","import { API } from './API'\n\nimport type { SwaggerPath } from '../type/SwaggerJson'\n\nexport const transformPaths = (paths: SwaggerPath) => {\n  const pathsResult: API[] = []\n  const effectTypesWithParsePaths: any[] = []\n  for (const path in paths) {\n    const pathConfig = paths[path]\n    Object.keys(pathConfig).forEach((method) => {\n      pathsResult.push(\n        new API({\n          pathConfig: pathConfig[method],\n          method\n        })\n      )\n    })\n  }\n\n  // collection API generating side effects\n  pathsResult.forEach((api) => {\n    console.log(api)\n  })\n\n  return {\n    pathsResult,\n    effectTypesWithParsePaths\n  }\n}\n","export const transformDefinitions = (definitions: SwaggerDefinitions) => {\n  console.log('definitions: ', definitions)\n  const res: any[] = []\n  return res\n}\n","import { transformPaths } from './paths'\nimport { transformDefinitions } from './definitions'\n\nimport type { SwaggerJson } from '../type/SwaggerJson'\n\nexport const parseSwagger = (swaggerJsonStr: string) => {\n  const swaggerJson: SwaggerJson = JSON.parse(swaggerJsonStr)\n  const { swagger, info, paths, definitions } = swaggerJson\n  const swaggerInfo = {\n    swaggerVersion: swagger,\n    info\n  }\n\n  const { pathsResult, effectTypesWithParsePaths } = transformPaths(paths)\n  const definitionsResult = transformDefinitions(definitions)\n\n  return {\n    swaggerInfo,\n    // path\n    pathsResult,\n    effectTypesWithParsePaths,\n    // definitions\n    definitionsResult\n  }\n}\n","/* eslint no-console: 0 */\n\nimport colors from 'picocolors'\nimport type { RollupError } from 'rollup'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\nexport interface Logger {\n  info(msg: string, options?: LogOptions): void\n  warn(msg: string, options?: LogOptions): void\n  warnOnce(msg: string, options?: LogOptions): void\n  error(msg: string, options?: LogErrorOptions): void\n}\n\nexport interface LogOptions {\n  clear?: boolean\n  timestamp?: boolean\n}\n\nexport interface LogErrorOptions extends LogOptions {\n  error?: Error | RollupError | null\n}\n\nconst output = (type: LogType, msg: string) => {\n  const prefix = 'swagger2ts'\n\n  /* eslint no-nested-ternary: 0 */\n  const tag =\n    type === 'info'\n      ? colors.cyan(colors.bold(prefix))\n      : type === 'warn'\n      ? colors.yellow(colors.bold(prefix))\n      : colors.red(colors.bold(prefix))\n\n  console[type](\n    `${colors.bgWhite(colors.bold(new Date().toLocaleTimeString()))} : ${tag}  ` + '\\n\\t' + `${msg}`\n  )\n}\n\nexport function createLogger(): Logger {\n  const warnedMessages = new Set<string>()\n\n  const logger: Logger = {\n    info(msg) {\n      output('info', msg)\n    },\n    warn(msg) {\n      output('warn', msg)\n    },\n    warnOnce(msg) {\n      if (warnedMessages.has(msg)) return\n      output('warn', msg)\n      warnedMessages.add(msg)\n    },\n    error(msg) {\n      output('error', msg)\n    }\n  }\n\n  return logger\n}\n","import { readFileSync } from 'node:fs'\nimport { parseSwagger } from './parse'\n\nimport { createLogger } from '../helper/logger'\n\nexport type Swagger2TsOptions = {\n  name: string\n  httpClientType: 'axios'\n  input?: string\n  url?: string\n  output: string\n}\n\nconst logger = createLogger()\n\nexport type ResolvedConfig = any\n\nexport const resolveOptions: (options: Swagger2TsOptions) => Promise<ResolvedConfig> = async (\n  options\n) => {\n  const { name, output, httpClientType, input, url } = options\n\n  if (!input && !url) {\n    logger.error('You must provide either an input file or a url')\n    process.exit(1)\n  }\n\n  let swaggerJson: any = null\n\n  if (input) {\n    swaggerJson = readFileSync(input, 'utf8')\n    if (!swaggerJson) {\n      logger.error(`Could not read file in this path : ${input}`)\n      process.exit(1)\n    }\n  }\n\n  const res = await parseSwagger(swaggerJson)\n\n  const resolved: ResolvedConfig = {\n    name,\n    output,\n    httpClientType,\n    input,\n    url,\n    ...res\n  }\n\n  return resolved\n}\n","import ejs from 'ejs'\nimport { resolve } from 'node:path'\nimport { readFileSync, writeFileSync } from 'node:fs'\nimport type { ResolvedConfig } from './config'\n\nconst genAPIs = (pathsResult: any) => {\n  console.log('pathsResult: ', pathsResult)\n  return null\n}\n\nconst genTypes = (definitionsResult: any) => {\n  console.log('definitionsResult: ', definitionsResult)\n  return null\n}\n\nexport const genCode = async (resolvedConfig: ResolvedConfig) => {\n  const { pathsResult, definitionsResult } = resolvedConfig\n\n  const template = readFileSync(resolve(__dirname, '../templates/api.ejs'), 'utf-8')\n\n  const APIsResult = await genAPIs(pathsResult)\n  const typesResult = await genTypes(definitionsResult)\n\n  try {\n    const buffer = ejs.render(template, {\n      APIsResult,\n      typesResult\n    })\n    const { name } = resolvedConfig\n\n    await writeFileSync(`${name}`, buffer)\n  } catch (e) {\n    console.log(e)\n  }\n}\n","import { resolveOptions, genCode } from './core'\nimport type { Swagger2TsOptions } from './core'\n\nexport const swagger2ts = async (options: Swagger2TsOptions) => {\n  const resolvedOptions = await resolveOptions(options)\n  await genCode(resolvedOptions)\n}\n"],"names":[],"mappings":"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"}