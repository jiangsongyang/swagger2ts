{"version":3,"file":"swagger2ts.esm.js","sources":["../src/helper/transformType.ts","../src/core/API.ts","../src/core/paths.ts","../src/core/Interface.ts","../src/core/definitions.ts","../src/core/parse.ts","../src/helper/logger.ts","../src/core/config.ts","../src/core/gen.ts","../src/index.ts"],"sourcesContent":["export const transformType = (type: string) => {\n  let res = ''\n  switch (type) {\n    case 'integer':\n      res = 'number'\n      break\n\n    default:\n      res = type\n      break\n  }\n\n  return res\n}\n","import { transformType } from '../helper/transformType'\nimport type { SwaggerPathItemValue, SwaggerPathResponsesSchema } from '../type/SwaggerJson'\n\ntype CreateAPIOptions = {\n  method: string\n  pathConfig: SwaggerPathItemValue\n}\n\nexport class API {\n  method: string\n  pathConfig: SwaggerPathItemValue\n  apiDescription: string\n  apiName: string\n  parameters: string\n  responseType: string\n\n  constructor({ method, pathConfig }: CreateAPIOptions) {\n    this.method = method\n    this.pathConfig = pathConfig\n    this.apiDescription = pathConfig.summary\n    this.apiName = pathConfig.operationId\n    this.parameters = this.parseParameters(pathConfig.parameters)\n    this.responseType = this.parseResponseType(pathConfig.responses['200'].schema)\n  }\n\n  parseParameters(parseParameters: any[]) {\n    let res = ''\n    parseParameters.forEach((parameter) => {\n      const { name, required, type, description } = parameter\n      /** xxx:type , */\n      res += `${description ? `\\n\\t/** ${description} */\\n` : ''}`\n      res += `\\t${name}${!required ? '?' : ''}:${transformType(type)} , `\n    })\n\n    return res + '\\n\\t'\n  }\n\n  parseResponseType(schema: SwaggerPathResponsesSchema) {\n    const { type, $ref } = schema\n    if ($ref) {\n      return $ref.replace('#/definitions/', '')\n    }\n    if (type) {\n      return transformType(type)\n    }\n    return ''\n  }\n}\n","import { API } from './API'\n\nimport type { SwaggerPath } from '../type/SwaggerJson'\n\nexport const transformPaths = (paths: SwaggerPath) => {\n  const pathsResult: API[] = []\n  const effectTypesWithParsePaths: any[] = []\n  for (const path in paths) {\n    const pathConfig = paths[path]\n    Object.keys(pathConfig).forEach((method) => {\n      pathsResult.push(\n        new API({\n          pathConfig: pathConfig[method],\n          method\n        })\n      )\n    })\n  }\n\n  return {\n    pathsResult,\n    effectTypesWithParsePaths\n  }\n}\n","import { transformType } from '../helper/transformType'\n\ntype InterfaceInfo = {\n  interfaceName: string\n  interfaceConfig: any\n}\n\nexport class Interface {\n  interfaceName: string\n  interfaceValue: Record<string, string>[]\n  effectTypesWithParseInterface: any[]\n\n  constructor(interfaceInfo: InterfaceInfo) {\n    this.interfaceName = interfaceInfo.interfaceName\n    this.effectTypesWithParseInterface = []\n\n    const { properties } = interfaceInfo.interfaceConfig\n    this.interfaceValue = this.parseInterfaceValue(properties)\n  }\n\n  parseInterfaceValue(properties: any) {\n    const res: any[] = []\n    Object.keys(properties).forEach((key) => {\n      const { $ref, type, description, items, enum: rowEnum } = properties[key]\n\n      if ($ref) {\n        res.push({\n          key,\n          value: $ref.replace('#/definitions/', ''),\n          description\n        })\n      }\n\n      if (type) {\n        let value = ''\n        const isArray = type === 'array'\n        if (rowEnum) {\n          value = key.toUpperCase() + '_ENUM'\n\n          this.effectTypesWithParseInterface.push({\n            enumName: value,\n            enumValue: rowEnum\n            // TODO need add enum key\n\n            // TODO need add enum description\n          })\n        } else if (items?.$ref) {\n          value = items?.$ref.replace('#/definitions/', '')\n        } else if (items?.type) {\n          value = transformType(items?.type)\n        } else {\n          value = transformType(type)\n        }\n        res.push({\n          key,\n          value: isArray ? `${value}[]` : value,\n          description\n        })\n      }\n    })\n    return res\n  }\n}\n","import { Interface } from './Interface'\nimport type { SwaggerDefinitions } from '../type/SwaggerJson'\n\nexport const transformDefinitions = (definitions: SwaggerDefinitions) => {\n  const definitionsResult: Interface[] = []\n  const effectTypesWithParseInterface: any[] = []\n  for (const interfaceName in definitions) {\n    const interfaceConfig = definitions[interfaceName]\n    definitionsResult.push(\n      new Interface({\n        interfaceName,\n        interfaceConfig\n      })\n    )\n  }\n\n  definitionsResult.forEach((interfaceRes) => {\n    if (interfaceRes.effectTypesWithParseInterface) {\n      effectTypesWithParseInterface.push(...interfaceRes.effectTypesWithParseInterface)\n    }\n  })\n\n  return {\n    definitionsResult,\n    effectTypesWithParseInterface\n  }\n}\n","import { transformPaths } from './paths'\nimport { transformDefinitions } from './definitions'\n\nimport type { SwaggerJson } from '../type/SwaggerJson'\n\nexport const parseSwagger = (swaggerJsonStr: string) => {\n  const swaggerJson: SwaggerJson = JSON.parse(swaggerJsonStr)\n  const { swagger, info, paths, definitions } = swaggerJson\n  const swaggerInfo = {\n    swaggerVersion: swagger,\n    info\n  }\n\n  const { pathsResult, effectTypesWithParsePaths } = transformPaths(paths)\n  const { definitionsResult, effectTypesWithParseInterface } = transformDefinitions(definitions)\n\n  return {\n    swaggerInfo,\n    // path\n    pathsResult,\n    effectTypesWithParsePaths,\n    // definitions\n    definitionsResult,\n    effectTypesWithParseInterface\n  }\n}\n","/* eslint no-console: 0 */\n\nimport colors from 'picocolors'\nimport type { RollupError } from 'rollup'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\nexport interface Logger {\n  info(msg: string, options?: LogOptions): void\n  warn(msg: string, options?: LogOptions): void\n  warnOnce(msg: string, options?: LogOptions): void\n  error(msg: string, options?: LogErrorOptions): void\n}\n\nexport interface LogOptions {\n  clear?: boolean\n  timestamp?: boolean\n}\n\nexport interface LogErrorOptions extends LogOptions {\n  error?: Error | RollupError | null\n}\n\nconst output = (type: LogType, msg: string) => {\n  const prefix = 'swagger2ts'\n\n  /* eslint no-nested-ternary: 0 */\n  const tag =\n    type === 'info'\n      ? colors.cyan(colors.bold(prefix))\n      : type === 'warn'\n      ? colors.yellow(colors.bold(prefix))\n      : colors.red(colors.bold(prefix))\n\n  console[type](\n    `${colors.bgWhite(colors.bold(new Date().toLocaleTimeString()))} : ${tag}  ` + '\\n\\t' + `${msg}`\n  )\n}\n\nexport function createLogger(): Logger {\n  const warnedMessages = new Set<string>()\n\n  const logger: Logger = {\n    info(msg) {\n      output('info', msg)\n    },\n    warn(msg) {\n      output('warn', msg)\n    },\n    warnOnce(msg) {\n      if (warnedMessages.has(msg)) return\n      output('warn', msg)\n      warnedMessages.add(msg)\n    },\n    error(msg) {\n      output('error', msg)\n    }\n  }\n\n  return logger\n}\n","import { readFileSync } from 'node:fs'\nimport { parseSwagger } from './parse'\n\nimport { createLogger } from '../helper/logger'\n\nexport type Swagger2TsOptions = {\n  name: string\n  httpClientType: 'axios'\n  input?: string\n  url?: string\n  output: string\n}\n\nconst logger = createLogger()\n\nexport type ResolvedConfig = any\n\nexport const resolveOptions: (options: Swagger2TsOptions) => Promise<ResolvedConfig> = async (\n  options\n) => {\n  const { name, output, httpClientType, input, url } = options\n\n  if (!input && !url) {\n    logger.error('You must provide either an input file or a url')\n    process.exit(1)\n  }\n\n  let swaggerJson: any = null\n\n  if (input) {\n    swaggerJson = readFileSync(input, 'utf8')\n    if (!swaggerJson) {\n      logger.error(`Could not read file in this path : ${input}`)\n      process.exit(1)\n    }\n  }\n\n  const res = await parseSwagger(swaggerJson)\n\n  const resolved: ResolvedConfig = {\n    name,\n    output,\n    httpClientType,\n    input,\n    url,\n    ...res\n  }\n\n  return resolved\n}\n","import ejs from 'ejs'\nimport { resolve } from 'node:path'\nimport { readFileSync, writeFileSync } from 'node:fs'\nimport type { ResolvedConfig } from './config'\n\nconst genAPIs = (pathsResult: any) => {\n  return pathsResult\n}\n\nconst genTypes = (definitionsResult: any) => {\n  return definitionsResult\n}\n\nconst genEnum = (enumResult: any) => {\n  const res: any = []\n  const enumNameSet = new Set()\n\n  enumResult.forEach((enumItem: any) => {\n    if (!enumNameSet.has(enumItem.enumName)) {\n      res.push(enumItem)\n      enumNameSet.add(enumItem.enumName)\n    }\n  })\n\n  return res\n}\n\nexport const genCode = async (resolvedConfig: ResolvedConfig) => {\n  const {\n    pathsResult,\n    definitionsResult,\n    effectTypesWithParsePaths,\n    effectTypesWithParseInterface\n  } = resolvedConfig\n\n  const template = readFileSync(resolve(__dirname, '../templates/api.ejs'), 'utf-8')\n\n  const APIsResult = await genAPIs(pathsResult)\n  const typesResult = await genTypes(definitionsResult)\n\n  const enumsResult = await genEnum([\n    ...effectTypesWithParsePaths,\n    ...effectTypesWithParseInterface\n  ])\n\n  try {\n    const buffer = ejs.render(template, {\n      APIsResult,\n      typesResult,\n      enumsResult\n    })\n    const { name } = resolvedConfig\n\n    await writeFileSync(`${name}`, buffer)\n  } catch (e) {\n    console.log(e)\n  }\n}\n","import { resolveOptions, genCode } from './core'\nimport type { Swagger2TsOptions } from './core'\n\nexport const swagger2ts = async (options: Swagger2TsOptions) => {\n  const resolvedOptions = await resolveOptions(options)\n  await genCode(resolvedOptions)\n}\n"],"names":[],"mappings":"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"}